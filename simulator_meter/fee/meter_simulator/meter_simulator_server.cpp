#include "meter_simulator_server.h"
#include <logger/logger.h>
#include "server_channel.hpp"
#include "ptcl_handler_serv.h"
#include "util/public.h"
#include "simulator_config.h"
#include "ptcl_codec/ptcl_cosem_dlms.h"

meter_simulator_server::meter_simulator_server(void)
{
}

meter_simulator_server::~meter_simulator_server(void)
{
}

void meter_simulator_server::run()
{
	//unsigned char buffer[1024] = {0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x7d,0xC0,0x03,0xC1,0x02,0x00,0x07,0x01,0x00,0x62,0x02,0x00,0xFF,0x02,0x01,0x01,0x02,0x04,0x02,0x04,0x12,0x00,0x08,0x09,0x06,0x00,0x00,0x01,0x00,0x00,0xFF,0x0F,0x02,0x12,0x00,0x00,0x09,0x0C,0x07,0xD6,0x0B,0x01,0xFF,0x17,0x3B,0x3B,0xFF,0x80,0x00,0xFF,0x09,0x0C,0x07,0xD6,0x0B,0x06,0xFF,0x17,0x3B,0x3B,0xFF,0x80,0x00,0xFF,0x01,0x00,0x00,0x07,0x01,0x00,0x62,0x02,0x00,0xFF,0x02,0x01,0x01,0x02,0x04,0x02,0x04,0x12,0x00,0x08,0x09,0x06,0x00,0x00,0x01,0x00,0x00,0xFF,0x0F,0x02,0x12,0x00,0x00,0x09,0x0C,0x07,0xD6,0x0B,0x01,0xFF,0x17,0x3B,0x3B,0xFF,0x80,0x00,0xFF,0x09,0x0C,0x07,0xD6,0x0B,0x06,0xFF,0x17,0x3B,0x3B,0xFF,0x80,0x00,0xFF,0x01,0x00,};
	//message_block mb;
	//mb.copy(buffer, sizeof(buffer));
	//ptcl_packet_dlms47 packet;
	////// parse
	//packet.set_packet_buffer(mb.rd_ptr(), mb.length());
	//if (packet.parse_packet() <= 0)
	//	return ;

	//ptcl_cosem_request request;
	//if (!request.parse_block(packet.get_data_area_buffer(), packet.get_data_area_length()))
	//	return;

	//std::vector<ptcl_cosem_request::cosem_methoed_desc>  v_cosem_desc;
	//request.get_list_data(v_cosem_desc);

	//int class_id = request.get_class_id();
	//std::string obis = request.get_obis();
	//int attr_id = request.get_attr_id();
	//unsigned int s = request.get_start_time();
	//unsigned int e = request.get_end_time();


	//unsigned char iv[] = {0x4D,0x4D,0x4D,0x00,0x00,0xBC,0x61,0x4E,0x01,0x23,0x45,0x67};
	//data_security *data_security_ = new local_data_security((byte)0x30, iv , Suite_ID::AES_GCM_128, (unsigned char *)simulator_config::get_instance()->get_ek().c_str(),(unsigned char *)simulator_config::get_instance()->get_ak().c_str());


	logger::get_instance()->start("meter_simulator");

	if (!simulator_config::get_instance()->read_param())
		return;

	ptcl_module_dlms47::get_instance()->set_host_id(1);//The host id must be 1 in dlms47;

	unsigned short port = simulator_config::get_instance()->get_listen_port();

	channel_ = new server_channel<ptcl_handler_serv>(1,4,2,1,"",port,channel_,2);
	channel_->start();
	channel_->join();

	logger::get_instance()->join();
}

void meter_simulator_server::exit()
{
	channel_->stop();

	logger::get_instance()->logger_info(1,"system","³ÌÐòÍË³ö");
	logger::get_instance()->stop();
}


